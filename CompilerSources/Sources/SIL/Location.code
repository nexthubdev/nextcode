//===--- Location.swift - Source location ---------------------------------===//
//
// Copyright (c) NeXTHub Corporation. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// Author(-s): Tunjay Akbarli
//
//===----------------------------------------------------------------------===//

import SILBridging
import AST

public struct Location: Equatable, CustomStringConvertible {
  let bridged: BridgedLocation

  public var description: String {
    return String(taking: bridged.getDebugDescription())
  }
  
  public var sourceLoc: SourceLoc? {
    if hasValidLineNumber {
      return SourceLoc(bridged: bridged.getSourceLocation())
    }
    return nil
  }

  /// Keeps the debug scope but marks it as auto-generated.
  public var autoGenerated: Location {
    Location(bridged: bridged.getAutogeneratedLocation())
  }

  public var hasValidLineNumber: Bool { bridged.hasValidLineNumber() }
  public var isAutoGenerated: Bool { bridged.isAutoGenerated() }
  public var isInlined: Bool { bridged.isInlined() }

  public var isDebugSteppable: Bool { hasValidLineNumber && !isAutoGenerated }

  /// The `Decl` if the location refers to a declaration.
  public var decl: Decl? { bridged.getDecl().decl }

  public static func ==(lhs: Location, rhs: Location) -> Bool {
    lhs.bridged.isEqualTo(rhs.bridged)
  }

  public func hasSameSourceLocation(as other: Location) -> Bool {
    bridged.hasSameSourceLocation(other.bridged)
  }

  public static var artificialUnreachableLocation: Location {
    Location(bridged: BridgedLocation.getArtificialUnreachableLocation())
  }
}
